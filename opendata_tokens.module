<?php 


function hook_init() {
    drupal_page_is_cacheable(FALSE);
}

/**
 * 
 * Implements opendata_tokens_block_info()
 * Informacion que tiene el blocke a visualizar
 *
 */
function opendata_tokens_block_info() {
	
	$blocks['opendata_tokens'] = array(
		'info'	=> t('Token de acceso'),
		// Nombre que aparecera en la lista de blocs
		'cache'	=> DRUPAL_NO_CACHE,
	);
	
	return $blocks;
}

/**
 * 
 * Implements opendata_tokens_block_view($delta = ''): convierte en contenido la informacion recogida/generada
 *
 * @param delta 
 *   indica a la funcion que bloque esta siendo "pedido"
 * @return array
 * 	devuelve un array con dos valores: subject y content
 */

function opendata_tokens_block_view( $delta = '' ) {
	
	drupal_page_is_cacheable(FALSE);
	
	switch($delta)
	{
		case 'opendata_tokens':
			global $user;

			$titulo = opendata_tokens_textos('titulo')['titulo'];
			$block['subject'] = $titulo;

			if (user_access('access content')) {
				
				// User[] roles: [1] anonymous, [2] authenticated user [3] administrator
				$button_solicitar = drupal_render(drupal_get_form('opendata_tokens_form_solicitar'));
				$button_recuperar = drupal_render(drupal_get_form('opendata_tokens_form_recuperar'));
				$button_modal 	  = opendata_tokens_textos('modal')['modal'];
				$button_salir 	  = opendata_tokens_textos('salir')['salir'];
                
                $block['content'] = '<div class="tokens"><a id="download"></a>';
				
				//Solo un block['content']
				if( isset($user->roles[1]) )
				{
					$block['subject'] = "";
					// Usuario anonimo
					//$block['content'] = opendata_tokens_text_info(false);
					$texto = opendata_tokens_textos( 'no_user' );
					$block['content'] .= $texto['info'];
				}
				else
				{
                    $resource_id = $_GET['resource_id'];
                    if ($resource_id) {
                        
                        $block['content'] .= '<div class="modal fade in" id="downloadModal" tabindex="-1" role="dialog" aria-labelledby="downloadModalLabel">
							  <div class="modal-dialog modal-lg" role="document">
								<div class="modal-content">
								  <div class="modal-header">
									<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
									<h4 class="modal-title" id="downloadModalLabel">Avís</h4>
								  </div>
								  <div class="modal-body">
                                    <i class="bcn-icon-proteccio-dades pull-right" style="font-size: 4em"> </i>
									<p>Has d\'incloure el teu token d\'accés a la capçalera de la petició tal i com s\'indica a la secció <strong>Com utilitzar el token</strong> d\'aquesta pàgina per a descarregar aquest recurs, encara que també pots descarregar-lo des des de el següent botó de descàrrega.</p>
                                    <div class="clearfix"></div>
								  </div>
								  <div class="modal-footer">
									<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Cancel·lar</button>
									'. drupal_render(drupal_get_form('opendata_tokens_form_download')).'
								  </div>
								</div>
							  </div>
							</div>
                            <script type="text/javascript">
                                jQuery(document).ready(function($) {
                                    $("#downloadModal").modal("show");
                                    $("#download-resource").click(function (event) {
                                        $(this).attr("disabled", true);
                                        $(this).addClass("btn-loading");
                                    });
                                });
                            </script>';
                    }
                        
					// Usuario registrado
					// Comprobamos si tiene token
					$token = opendata_tokens_get_token();
					if( empty($token) || $token == "" )
					{
						// No tiene token
						$block['content'] .= $button_solicitar . $button_recuperar;
					}
					else
					{
						// Tiene token
						$texto = opendata_tokens_textos( 'recuperar' );
                        
						$block['content'] .= '<p>' . $texto['token'] . '</p><pre class="token">'. $token . '</pre>' . $button_modal . $button_salir;					
					}
					
					
				}
                
                $block['content'] .= "</div>";
			}
			return $block;
	}
}

/**
 * 
 * Implements opendata_tokens_get_token()
 *
 */

// Coger token de usuario para mostrarselo
function opendata_tokens_get_token() 
{

	// Cogemos id de usuario
	global $user;
	$userID = $user->uid;
	$query = "";
	
	// Seleccionamos el token del usuario
	try
	{
		$query = db_select('opendata_tokens','t')
				 ->fields('t')->condition('id_usuario', $userID)
				 ->execute();

	}catch( PDOException $e )
	{
		$texto = opendata_tokens_textos( 'error' );
		drupal_set_message( $texto['error'] , 'error');
	}

	$token = ( $query->rowCount() == 1) ? $query->fetch()->tkn_usuario : "";

	return $token;
}


// Inserta token
function opendata_tokens_insert_token( $token = null )
{
	global $user;
	$result = "";

	if( !is_null($token) || $token != "" )
	{
		// Comprobamos si existe ese token en la bd?
		while ( opendata_tokens_existe_token( $token ) )
		{
			$token = opendata_tokens_generar_token();
		}

		$transaction = db_transaction();
		
		try{
			$query = db_insert('opendata_tokens')
					 ->fields( array( 'id_usuario' => $user->uid ,'tkn_usuario' => $token,'tkn_created_date' => date('Y-m-d  H:i:s'), 'tkn_modified_date' => date('Y-m-d  H:i:s') ) )
					 ->execute();
			$result = "ok";
			
		} catch( PDOException $e ) { 	
			$transaction->rollback();
			$texto = opendata_tokens_textos( 'error' );
			drupal_set_message( $texto['error'] . ". " . $e->getMessage() , 'error');
			$result = ""; 
		}
	}
	else
	{
		$result = "";
	}
		
	return $result;
}



// Actualiza token
function opendata_tokens_update_token()
{
	$token = opendata_tokens_generar_token();
	global $user;

	$transaction = db_transaction();

	try{

		$query = db_update('opendata_tokens')
				 ->fields( array( 'tkn_usuario' => $token, 'tkn_modified_date' => date('Y-m-d  H:i:s') ) )
				 ->condition('id_usuario', $user->uid )
				 ->execute();

	}catch( PDOException $e )
	{
		$transaction->rollback();
		$texto = opendata_tokens_textos( 'error' );
		drupal_set_message( $texto['error'] , 'error');
	}

	return $token;
	//print_r("UODATE " .$token);
	/*if( $query->rowCount() == 1 )
	{
		//Se ha anyadido
	}*/
	
}


// Comprueba si ese token esta usandose
function opendata_tokens_existe_token( $token )
{
	$exists = false; 

	try{

		$query = db_select('opendata_tokens','t')
				 ->fields('t')
				 ->condition('tkn_usuario', $token)
				 ->execute();

	}catch( PDOException $e ){}

	$exists = ( $query->rowCount() == 1) ? true : false;
	
	return $exists;
}

/**
 * 
 * Implements opendata_tokens_text_info()
 *
 */
 
 function opendata_tokens_text_info( $user = false, $token = false )
 {
	 $texto = "";
	 if( $user )
	 {
	 	if( $token )
	 	{
	 		// Esta logueado
			$texto = "<div style='margin-bottom: 10px;'>
						<h1>" . t('Usuario SI registrado'). "</h1>";
			$texto .=		"<p>" . t('Aqui puedes recuperar tu <i>token</i> de usuario si lo has expuesto y necesitas uno nuevo.') ."</p>";
			$texto .=		"<p>" . t(' A continuaci&oacuten, se muestra un bot&oacuten para recuperar el token.') . "</p>";
			$texto .=		"<p>" . t('Este es tu token actual: '). "</p></div>";
			// Tiene token
			// No tiene token
	 	}else
	 	{
	 		$texto = "<div style='margin-bottom: 10px;'>
						<h1>" . t('Usuario SI registrado'). "</h1>";
			$texto .=	"<p>" . t('Aqu&iacute puedes solicitar tu <i>token</i> de usuario para poder acceder a los servicios web de BSM.') . "</p>";
			$texto .=	"<p>" . t(' A continuaci&oacuten, se muestra un bot&oacuten para generar el token.') . "</p></div>";
	 	}
		 
	 }else
	 {
		 $texto = "<div>
						<h1>" . t('Usuario NO registrado') . "</h1>";
		$texto .= "<p>" . t('Para poder solicitar tu <i>token</i> debes de ser un usuario registrado.') . "</p>";
		$texto .= "<p>" . t('Por favor, <a href="@drupal-registro">registrate</a> o <a href="@drupal-login">identif&iacutecate</a> para poder acceder a este servicio.', 
							array( '@drupal-registro' => 'user/register' , '@drupal-login' => 'user/login?redirect=http://opendatabcn-pre.alfatecsistemas.es/es/tokens') ) . "</p></div>";
	 }
	 
	 return $texto;
 }
 
 /**
 * 
 * Implements opendata_tokens_menu()
 * Configuracion del moo: de momento, creo que no hace falta
 * Puede servir para habilitar o desabhilitar este modulo.
 */
 
function opendata_tokens_menu()
{
	$items = array();
	
	$items['test-tokens'] = array(
		'title'				=> 'Bot&oacuten para solicitar token',
		'description'		=> 'Bot&oacuten para solicitar token',
		'page callback'		=> 'opendata_tokens_block_view',
		'page arguments'	=> array('opendata_tokens_form_solicitar', 'opendata_tokens_form_recuperar'),
		'access callback'	=> TRUE,
	);
	
	return $items;
}

/******************************/    
/**     Solicitar token     **/
/****************************/
function opendata_tokens_form_solicitar( $form, &$form_state )
{
	$texto = opendata_tokens_textos('solicitar');
	
	$form['submit_button'] = array( 
		'#type'		=> 'submit',
		'#name'		=> 'Token',
		'#value'	=> $texto['boton'],
	);
	
	return $form;
}

function opendata_tokens_form_solicitar_submit( $form, &$form_state )
{
	// Aqui debera de generar el token y guardarlo en la base de datos
	$token = opendata_tokens_generar_token();

	if( !empty($token) ) {
		$result = opendata_tokens_insert_token($token); 
	}

	$texto = opendata_tokens_textos( 'solicitar' );
	if( $result != "" )
	{
		drupal_set_message( $texto['exito']  );
	}
	else{
		drupal_set_message( $texto['error'] , 'error');
	}

}

function opendata_tokens_generar_token()
{
	$token = bin2hex(openssl_random_pseudo_bytes(32));
	return $token;
}

/******************************/    
/**     Recuperar token     **/
/****************************/
function opendata_tokens_form_recuperar( $form, &$form_state )
{
	$texto = opendata_tokens_textos( 'confirmar' );

	$form['submit_button'] = array( 
		'#type'		=> 'submit',
		'#name'		=> 'Token' ,
		'#value'	=> $texto['confirm'],
	);
	
	return $form;
}

function opendata_tokens_form_recuperar_submit( $form, &$form_state )
{
	// Aqui debera de generar el token y guardarlo en la base de datos
	$texto = opendata_tokens_textos( 'recuperar' );
	drupal_set_message( $texto['exito'] );
	
	$new_token = opendata_tokens_update_token();
}

/** Descargar recurso **/
function opendata_tokens_form_download( $form, &$form_state )
{
	$texto = opendata_tokens_textos('download');
    
    $form['token'] = array(
      '#type' => 'hidden',
      '#value' => opendata_tokens_get_token(),
    );
    
    $form['resource_id'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['resource_id'],
    );
    
    $form['package_id'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['package_id'],
    );

	$form['submit_button'] = array( 
        '#id'       => 'download-resource', 
		'#type'		=> 'submit',
		'#name'		=> 'Token' ,
		'#value'	=> $texto['titulo'],
        '#attributes' => array('class' => array('btn-primary'))
	);
	
	return $form;
}

function opendata_tokens_form_download_submit( $form, &$form_state )
{
    global $user;
    $token = trim($form_state['values']['token']);
    $resource_id = trim($form_state['values']['resource_id']);
    $package_id = trim($form_state['values']['package_id']);
    
    
    if (empty($token)) {
        $token = opendata_tokens_generar_token();

        if(!empty($token)) {
            $result = opendata_tokens_insert_token($token); 
        }
    }
    
    if ($user && !empty($token) && !empty($resource_id) && !empty($package_id)) {
   
        // Aqui debera de generar el token y guardarlo en la base de datos
        $opts = array(
          'http'=>array(
            'method'=>"GET",
            'header'=> "Authorization: ".$token
          )
        );

        $context = stream_context_create($opts);

        // Open the file using the HTTP headers set above
        $url = 'http://' . $_SERVER['SERVER_NAME'] . '/data/dataset/'.$package_id.'/resource/'.$resource_id.'/download';
        $file = file_get_contents($url, false, $context);
        
        foreach ($http_response_header as $header) {
            if (strpos($header, 'Content-Type') === 0) {
                header($header);
            }
        }
        
        print_r($file);
        exit;
    } else {
        drupal_set_message( $texto['error'] , 'error');
    }

}


function opendata_tokens_textos( $boton )
{
	global $language;
	$texto = array();
	
	if( $boton == 'titulo' )
	{
		switch( $language->language )
		{
			case 'es':
				$texto['titulo'] = 'Token de acceso';
				break;
			
			case 'en':
				$texto['titulo'] = 'Access token';
				break;
			
			case 'ca':
				$texto['titulo'] = 'Token d&apos;access';
				break;
		}
	}
    
    if( $boton == 'download' )
	{
		switch( $language->language )
		{
			case 'es':
				$texto['titulo'] = 'Descargar recurso';
				break;
			
			case 'en':
				$texto['titulo'] = 'Download resource';
				break;
			
			case 'ca':
				$texto['titulo'] = 'Descarregar recurs';
				break;
		}
	}
	
	if( $boton == 'solicitar' )
	{
		switch( $language->language )
		{
			case 'es':
				$texto['boton'] = 'Solicitar token';
				$texto['exito'] = 'Token solicitado con &eacutexito';
				$texto['error']	 = 'No se ha podido generar el token';
				break;
			
			case 'en':
				$texto['boton'] = 'Request token';
				$texto['exito'] = 'Successful requested token';
				$texto['error']	 = 'The token could not be requested';
				break;
			
			case 'ca':
				$texto['boton'] = 'Sol&middot;licitar token';
				$texto['exito'] = 'Token sol&middot;licitat amb &eagravexit';
				$texto['error']	 = 'No s&apos;ha pogut generar el token';
				break;
		}
	}

	if( $boton == 'recuperar' )
	{
		switch( $language->language )
		{
			case 'es':
				$texto['boton'] 	= 'Regenerar token';
				$texto['token'] 	= 'Este es tu <i>token</i>:';
				$texto['exito'] 	= 'Token regenerado con &eacute;xito';
				$texto['error']		= 'No se ha podido regenerar el token';
				break;

			case 'en':
				$texto['boton'] = 'Regenerate token';
				$texto['token'] = 'This is your <i>token</i>:';
				$texto['exito'] = 'Successfully regenerated token';
				$texto['error']	 = 'The token could not be regenerated';
				break;

			case 'ca':
				$texto['boton'] = 'Regenerar token';
				$texto['token'] = 'Aquest es el teu <i>token</i>:';
				$texto['exito'] = 'Token regenerat amb &egrave;xit';
				$texto['error']	 = 'No s&apos;ha pogut regenerar el token';
				break;
		}
	}
	if( $boton == 'error' )
	{
		switch( $language->language )
		{
			case 'es':
				$texto['error'] = 'Se ha producido un error. Int&eacutentelo de nuevo m&aacutes tarde o contacte con los administradores del sitio web';
				break;

			case 'en':
				$texto['error'] = 'An error has occurred. Try it later or make contact with the site administrators.';
				break;

			case 'ca':
				$texto['error'] = 'S&apos;ha produ&iuml;t un error. Ho a provar m&eacutes tard o contacteu amb els administradors del lloc web';
				break;
		}
		
	}
	if( $boton == 'no_user')
	{
		switch( $language->language )
		{
			case 'es':
				$texto['info'] =  "<div><h2>Registro o Identificaci&oacute;n</h2>
									<p>Para poder solicitar tu <i>token</i> debes de ser un usuario registrado.</p>";
				$texto['info'].=  t('Por favor, <a href="@drupal-registro">reg&iacute;strense</a> o <a href="@drupal-login">identif&iacute;quense</a> para poder acceder a este servicio.', 
									array( '@drupal-registro' => 'user/register' , '@drupal-login' => 'user/login?redirect=http://opendatabcn-pre.alfatecsistemas.es/es/tokens') ).'</p></div>';
				break;

			case 'en':
				$texto['info'] =  "<div><h2>Registration or Identification</h2>
									<p>To be able to request your <i>token</i> you must be a registered user.</p>";
				$texto['info'].=  t('Please, <a href="@drupal-registro">sing up</a> or <a href="@drupal-login">log in</a> to access this service.', 
									array( '@drupal-registro' => 'user/register' , '@drupal-login' => 'user/login?redirect=http://opendatabcn-pre.alfatecsistemas.es/en/tokens') ).'</p></div>';
				break;

			case 'ca':
				$texto['info'] =  "<div><h2>Registre o Identificaci&oacute;</h2>
                                    <div class=\"avis\">
                                        <h3>Avís</h3>
                                        <p>Per descarregar aquest recurs, és necessari la sol.licitud prèvia d'un token d'accés</p>
                                    </div>
									<p>Per a poder sol&middot;licitar el vostre <em>token</em> has de ser un usuari registrat.</p>";
				$texto['info'].=  t('Si us plau, <a href="@drupal-registro">registreu-vos</a> o <a href="@drupal-login">identifiqueu-vos</a> per poder accedir a aquest servei.', 
									array( '@drupal-registro' => 'user/register' , '@drupal-login' => 'user/login?redirect=http://opendatabcn-pre.alfatecsistemas.es/ca/tokens') ).'</p></div>';
				break;
		}
	}
	if( $boton == 'confirmar' )
	{
		switch( $language->language )
		{
			case 'es':
				
				$texto['confirm']	= 'Confirmar';
				$texto['cancelar'] 	= 'Cancelar';
				$texto['pregunta']  = '¿Seguro que desea regenerar el token?';
				$texto['info']		= '<p>Si pulsa Aceptar, se generar&aacute; uno nuevo dehabilitando el token previo, y por tanto, habr&aacute; que tenerlo en cuenta en todas las llamadas donde se hace uso. <p>
										<p>Si no est&aacutes seguro, pulsa el bot&oacuten Cancelar.</p>';
				break;

			case 'en':
				$texto['confirm']	= 'Confirm';
				$texto['cancelar'] 	= 'Cancel';
				$texto['pregunta']  = 'Are you sure you want to regenerate the <i>token</i>?';
				$texto['info']		= '<p>If you press Accept, a new one will be generated, disabling the previous token, and therefore, it will have to be taken into account in all calls where it is used. </p>
										<p>If you are not sure, press the Cancel button.</p>';
				break;

			case 'ca':
				$texto['confirm']	= 'Confirmar';
				$texto['cancelar'] 	= 'Cancel&middot;lar';
				$texto['pregunta'] 	= 'Segur que voleu regenerar el token?';
				$texto['info']		= '<p>Si premeu Acceptar, se&#39;n generar&agrave; un de nou deshabilitant el token previ, i per tant, caldr&agrave; tenir-ho en compte en totes les crides on se&#39;n fa &uacute;s. </p>
										<p>Si no est&agrave;s segur, prem el bot&oacute; Cancel&middot;lar.</p>';
				break;
		}
	}
	if( $boton == 'modal' )
	{
		$recuperar = opendata_tokens_textos( 'recuperar' );
		$modal = opendata_tokens_textos( 'confirmar' );
		
		$texto['modal'] = '<button type="button" class="btn btn-default" data-toggle="modal" data-target="#myModal">
							 '. $recuperar['boton'] .'
							</button>

							<!-- Modal -->
							<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
							  <div class="modal-dialog" role="document">
								<div class="modal-content">
								  <div class="modal-header">
									<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
									<h4 class="modal-title" id="myModalLabel">'. $modal['pregunta'] .'</h4>
								  </div>
								  <div class="modal-body">
									'. $modal['info'].'
								  </div>
								  <div class="modal-footer">
									<button type="button" class="btn btn-default pull-left" data-dismiss="modal">'. $modal['cancelar'] .'</button>
									'. drupal_render(drupal_get_form('opendata_tokens_form_recuperar')).'
								  </div>
								</div>
							  </div>
							</div>';
	}
	
	if( $boton == 'salir' )
	{
		$salir = "";
		switch( $language->language )
		{
			case 'es':
				$salir	= 'Salir';
				$texto['salir'] = t('<a href="@drupal-logout" class="btn btn-primary">'.$salir.'</a>',array( '@drupal-logout' => 'user/logout'));
				break;

			case 'en':
				$salir	= 'Logout';
				$texto['salir'] = t('<a href="@drupal-logout" class="btn btn-primary">'.$salir.'</a>',array( '@drupal-logout' => 'user/logout'));
				break;

			case 'ca':
				$salir	= 'Sortir';
				$texto['salir'] = t('<a href="@drupal-logout" class="btn btn-primary">'.$salir.'</a>',array( '@drupal-logout' => 'user/logout'));
				break;
		}
		
		
	}

	return $texto;
}
